dmax <- as.data.frame(subset(d, info == maxinf)) #return valus with highes correct change in believe
d05 <- as.data.frame(subset(d, alpha == 0.05)) #compare to 5% alpha
dmax <- cbind(dmax, d05$info)
colnames(dmax) <- c("alpha", "power", "Learning", "Learning05")
if(dmax$alpha > 0.99) stop("Hard to estimate alpha/power with so few participants/small effect size.
Consider increasing the sample size")
paste("The ideal alpha level is ", round(dmax$alpha, digits = 2), " with a power of ", round(dmax$power, digits = 2),
" and learning of ", round(dmax$Learning, digits = 2), ". This is " ,round(dmax$Learning/dmax$Learning05, digits = 2),
" times as much learning as with the conventional alpha level of 0.05 ", sep = "")
})
#### Panel2 ####
output$AlphaConfirmation <- renderPlot({
n <- input$nC
effsize <- input$dC
prior <- input$priorC
posttrue <- input$postC
test = input$testC
type = input$typeC
alternative = input$alternativeC
k = input$KC
if(prior > posttrue) #stop if posterior smaller than prior
{
stop("Prior must be smaller than posterior")
}
alpha   <- seq(0, 1, .00001) #define vector of alphas
#calculate powers
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k)
#calculate posteriors after confirming or disconfirming and expected learning
confirm <- postConfirm(power, alpha, prior)
disconf <- postDisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- data.frame(alpha, power, info, confirm)
#calculate the smallest confirming posterior that is above the user specified posterior
#the alpha level corresponding to this posterior is what we are looking for.
maxinf <- max(na.omit(info))
postt <- as.data.frame(subset(df, confirm > posttrue))
if (nrow(postt) == 0) stop("You need more participants to enable the intended in probability")
postt <- max(postt$info)
d <- subset(df, info == postt)
if(nrow(d) > 1) {
stop ("You have unreasonably high power,
therefore, there is not enough precision to calculate
a unique best alpha level. Consider a smaller sample size")
}
#plot
plot(alpha,info,
ylab = "Expected Correct Change in Belief",
xlab = "Signifcance Level", type = "l",
main = paste("Alpha for",posttrue, "Probability after Significance") ,
xlim = c(0,1), axes = F, ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side = 2, at = c(seq(0,(maxinf+0.01),0.01)))
axis(side = 1, at = c(seq(0,1,0.05)))
mtext(side = 3, paste("Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info * 100, digits = 2), "%"))
if(d$alpha[1] > 0.99) {
stop("Hard to estimate alpha/power with so few participants/small effect size.
Consider increasing the sample size")
}
if(round(d$confirm,1) != round(posttrue,1)) {
warning("You have a lot of power, therefore, you might achieve
even higher probability than intended")
}
})
output$ResultsC <- renderText({
n <- input$nC
effsize <- input$dC
prior <- input$priorC
posttrue <- input$postC
test = input$testC
type = input$typeC
alternative = input$alternativeC
k = input$KC
if(prior > posttrue) #stop if posterior smaller than prior
{
stop("Prior must be smaller than posterior")
}
alpha   <- seq(0, 1, .00001) #define vector of alphas
#calculate powers
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k)
#calculate posteriors after confirming or disconfirming and expected learning
confirm <- postConfirm(power, alpha, prior)
disconf <- postDisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- data.frame(alpha, power, info, confirm)
#calculate the smallest confirming posterior that is above the user specified posterior
#the alpha level corresponding to this posterior is what we are looking for.
maxinf <- max(na.omit(info))
postt <- as.data.frame(subset(df, confirm > posttrue))
if (nrow(postt) == 0) stop("You need more participants to enable the intended in probability")
postt <- max(postt$info)
d <- subset(df, info == postt)
if(nrow(d) > 1) {
stop ("You have unreasonably high power,
therefore, there is not enough precision to calculate
a unique best alpha level. Consider a smaller sample size")
}
if(d$alpha[1] > 0.99) {
stop("Hard to estimate alpha/power with so few participants/small effect size.
Consider increasing the sample size")
}
if(round(d$confirm,1) != round(posttrue,1)) {
warning("You have a lot of power, therefore, you might achieve
even higher probability than intended")
}
paste("The needed alpha level is ", round(d$alpha, digits = 2), " with a power of ", round(d$power, digits = 2),
" and an actual posterior probability after significance of ", round(d$confirm, digits = 2), ".")
})
### panel 3 ###
output$AlphaDisconfirmation <- renderPlot({
n <- input$nD
effsize <- input$dD
prior <- input$priorD
postfalse <- input$postD
test = input$testD
type = input$typeD
alternative = input$alternativeD
k = input$KD
if(postfalse > prior)
{
stop("Prior must be higher than posterior")
}
alpha   <- seq(0, 1, .00001)
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) #power.prop.test(n, p1 = 0.8, p2 = 1, sig.level = alpha)$power
confirm <- postConfirm(power, alpha, prior)
disconf <- postDisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- data.frame(alpha, power, info, disconf)
#f <- max(na.omit(info))
maxinf <- max(na.omit(info))
postd <- as.data.frame(subset(df, disconf < postfalse))
if (nrow(postd) == 0) stop("You need more participants to enable the intended probability")
postd <- max(postd$info)
d <- subset(df, info == postd)
if(nrow(d) > 1) {
stop ("You have unreasonably high power,
therefore, there is not enough precision to calculate
a unique best alpha level. Consider a smaller sample size.")
}
#plot
plot(alpha, info,
ylab = "Expected Correct Change in Belief",
xlab = "Signifcance Level", type = "l",
main = paste("Alpha for", round(postfalse, digits = 2), "Probability after Non-Significance") ,
xlim = c(0,1), axes = F,
ylim =c(0,round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side = 2, at = c(seq(0,(maxinf+0.01),0.01)))
axis(side = 1, at = c(seq(0,1,0.05)))
mtext(side = 3, paste("Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
if(d$alpha > 0.99) {
stop("Hard to estimate alpha/power with so few participants/small effect size.
Consider increasing the sample size")
}
if(round(d$disconf,1) != round(postfalse,1)) {
warning("You have a lot of power, therefore, you might achieve
even lower probability than intended")
}
})
output$ResultsD <- renderText({
n <- input$nD
effsize <- input$dD
prior <- input$priorD
postfalse <- input$postD
test = input$testD
type = input$typeD
alternative = input$alternativeD
k = input$KD
if(postfalse > prior)
{
stop("Prior must be higher than posterior")
}
alpha   <- seq(0, 1, .00001)
power  <- get_power(alpha, effsize, n, test = test, type = type, alternative = alternative, k = k) #power.prop.test(n, p1 = 0.8, p2 = 1, sig.level = alpha)$power
confirm <- postConfirm(power, alpha, prior)
disconf <- postDisconfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
df <- data.frame(alpha, power, info, disconf)
#f <- max(na.omit(info))
maxinf <- max(na.omit(info))
postd <- as.data.frame(subset(df, disconf < postfalse))
if (nrow(postd) == 0) stop("You need more participants to enable the intended probability")
postd <- max(postd$info)
d <- subset(df, info == postd)
if(nrow(d) > 1) {
stop ("You have unreasonably high power,
therefore, there is not enough precision to calculate
a unique best alpha level. Consider a smaller sample size.")
}
#plot
if(d$alpha > 0.99) {
stop("Hard to estimate alpha/power with so few participants/small effect size.
Consider increasing the sample size")
}
if(round(d$disconf,1) != round(postfalse,1)) {
warning("You have a lot of power, therefore, you might achieve
even lower probability than intended")
}
paste("The needed alpha level is ", round(d$alpha, digits = 2), " with a power of ", round(d$power, digits = 2),
" and an actual posterior probability after significance of ", round(d$disconf, digits = 2), ".")
})
### panel 4 ###
output$ProbPower <- renderPlot({
effsize <- input$dP
prior <- input$priorP
postfalse <- input$postDP
posttrue <- input$postCP
test = input$testP
type = input$typeP
alternative = input$alternativeP
k = input$KP
if(postfalse >= prior | prior >= posttrue)  {
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001, 1, .001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:1000) {
power <- get_power(alpha, effsize, i, test = test, type = type, alternative = alternative, k = k)
#calculate power for all alphas for this sample size
disconf <- postDisconfirm(power, alpha, prior)
confirm <- postConfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- data.frame(alpha, power, disconf, confirm, info)
postd <- as.data.frame(subset(df, disconf < postfalse))
d <- subset(postd, confirm > posttrue)
n <- i
if(nrow(d) > 0) {
break
}
}
d <- subset(d, info == max(info))
d <- cbind(d,n)
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
plot(df$alpha, df$info,
ylab = "Expected Correct Change in Belief",
xlab = "Signifcance Level",
type = "l",
main = paste("Probability bas Power Analysis - PosteriorConfirmation:",posttrue, "  Posterior Disconfirmation:", postfalse) ,
xlim = c(0, 1),
axes = F,
ylim = c(0, round(maxinf + 0.005, digits = 2)))
abline(v = 0.05, col = "red")
abline(v = d$alpha, col = "blue")
axis(side = 2, at = c(seq(0, (maxinf + 0.01), 0.01)))
axis(side = 1, at = c(seq(0, 1, 0.05)))
mtext(side = 3, paste("Sample Size", i, " Alpha = ", round(d$alpha, digits = 2), " Power = ", round(d$power, digits = 2), "Learning =", round(d$info*100, digits = 2), "%"))
})
output$ResultsP <- renderText({
effsize <- input$dP
prior <- input$priorP
postfalse <- input$postDP
posttrue <- input$postCP
test = input$testP
type = input$typeP
alternative = input$alternativeP
k = input$KP
if(postfalse >= prior | prior >= posttrue)  {
stop("Posterior after disconfirming needs to be smaller than prior, posterior after confirming larger")
}
alpha <- seq(.0001, 1, .001)
#for 10-20 000 particpants calculte the alpha needed to achieve the posterior after a negative result
#stop the loop when there is an option that at the same time has the needed posterior probability after a positive result
for (i in 10:1000) {
power <- get_power(alpha, effsize, i, test = test, type = type, alternative = alternative, k = k)
#calculate power for all alphas for this sample size
disconf <- postDisconfirm(power, alpha, prior)
confirm <- postConfirm(power, alpha, prior)
info <- information(confirm, disconf, power, alpha, prior)
maxinf <- max(na.omit(info))
df <- data.frame(alpha, power, disconf, confirm, info)
postd <- as.data.frame(subset(df, disconf < postfalse))
d <- subset(postd, confirm > posttrue)
n <- i
if(nrow(d) > 0) {
break
}
}
d <- subset(d, info == max(info))
d <- cbind(d,n)
colnames(d) <- (c("alpha", "power", "disconf", "confirm", "info", "n"))
paste("The needed alpha level is ", round(d$alpha, digits = 2), " with a power of ", round(d$power, digits = 2),
" and a required sample size is is ", d$n, " participants per group. The actual posterior probabilites are ", round(d$confirm, digits = 2),
" after significance and ", round(d$disconf, digits = 2), " after non-significance.", sep = "")
})
}
options(shiny.sanitize.errors = FALSE)
# Run the application
shinyApp(ui = ui, server = server)
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
runApp('PaperWriting/IdealAlpha/Optimize_Alpha/app')
devtools::install_github("maxmaier42/IMEC")
?IMEC
?computeIMEC
library(IMEC)
?IMEC
devtools::document()
setwd("C:/Users/Maximilian Maier/Desktop/IMECPackage/IMEC")
devtools::document()
?intializeNetwork
devtools::load_all()
?intializeNetwork
?initializeNetwork
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
devtools::document()
devtools::load_all()
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
IMEC
class(IMEC$ExplanatoryCoherenceT1[,2])
IMEC$ExplanatoryCoherenceT1[,2]
IMEC$ExplanatoryCoherenceT1[,2] = as.numeric(IMEC$ExplanatoryCoherenceT2[,2])
IMEC$ExplanatoryCoherenceT1[,2]
class(IMEC$ExplanatoryCoherenceT1[,2])
bla = as.numeric(IMEC$ExplanatoryCoherenceT2[,2])
class(bla)
devtools::load_all()
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
IMEC
IMEC$ExplanatoryCoherenceT1[[2]]
IMEC$ExplanatoryCoherenceT1[,2]
IMEC$ExplanatoryCoherenceT1[[2]]
?list
IMEC[[1]]
devtools::load_all()
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
summary(IMEC)
IMEC$ExplanatoryCoherenceT1
devtools::load_all()
devtools::load_all()
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
summary(IMEC)
devtools::load_all()
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
summary(IMEC)
res <- summary(IMEC)
mean(res$EC_T1)
devtools::install.github("maxmaier42/IMEC")
devtools::install_github("maxmaier42/IMEC")
devtools::install_github("maxmaier42/IMEC")
devtools::install_github("maxmaier42/IMEC")
