(24/642+1.96^2/(2*642)-1.96*sqrt(24/642*(1-24/642)/642+1.96^2/(4*642^2)))/(1+1.96^2/642)
(24/642+1.96^2/(2*642)+1.96*sqrt(24/642*(1-24/642)/642+1.96^2/(4*642^2)))/(1+1.96^2/642)
1009/1230-207/340
0.2115+1.96*sqrt((1009/1230*(1-1009/1230))/1230+(207/340*(1-207/340))/340)
0.2115-1.96*sqrt((1009/1230*(1-1009/1230))/1230+(207/340*(1-207/340))/340)
(4.84/0.4)^2
1.96/(4*0.03^2)
pnorm(0.9)
(0.816/0.05*sqrt(0.5))^2
(sqrt(4.84)/0.4)^2
(sqrt(4.84)/0.4)^2
(sqrt(4.84*1.96)/0.4)^2
(4.84*1.96)/0.4)^2
(4.84*1.96/0.4)^2
(4.84*1.96^2/0.4^2)
1.96^2/(4*0.03^2)
pnorm(0.9)
(0.816/0.05*sqrt(0.5))^2
(pnorm(0.95)/0.05*sqrt(0.5))^2
(pnorm(0.975)/0.05*sqrt(0.5))^2
pnorm(0.95)
(qnorm(0.9)/0.05*sqrt(0.5))^2
3.5/2.5
mean(2.1, 2.6, 2.6, 3.4, 2.1, 1.7, 2.6, 2.6, 2.2, 1.2)
mean(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3)
sd(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3)
var(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3)
sd(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3)
mean(c(2.1, 2.6, 2.6, 3.4, 2.1, 1.7, 2.6, 2.6, 2.2, 1.2))
mean(c(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3))
sd(c(2.1, 2.6, 2.6, 3.4, 2.1, 1.7, 2.6, 2.6, 2.2, 1.2))
var(c(2.1, 2.6, 2.6, 3.4, 2.1, 1.7, 2.6, 2.6, 2.2, 1.2))
var(c(3.5, 3.9, 3.0, 2.3, 2.1, 3.1, 3.6, 1.8, 2.9, 3.3))
mean(c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75))
mean(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
2-sqrt(3)
runjags::autorun.jags(
model           = model_syntax,
data            = data,
monitor         = "omega",
n.chains        = 2,
method          = "rjparallel",
modules         = "RoBMA"
)
library("RoBMA")
model_syntax <- '
model{
for(j in 1:2){
eta[j] ~ dgamma(1, 1)
}
for(j in 1:2){
std_eta[j]  = eta[j] / sum(eta)
omega[j]    = sum(std_eta[1:j])
}
for(i in 1:10){
t[i] ~ dwt_1s(10, 0, crit_t[i,], omega)
}
}'
data <- list(
t      = rt(10, 10),
crit_t = matrix(1.96, ncol = 1, nrow = 10)
)
runjags::autorun.jags(
model           = model_syntax,
data            = data,
monitor         = "omega",
n.chains        = 2,
method          = "rjparallel",
modules         = "RoBMA"
)
library("IMEC")
?IMEC
?computeIMEC
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC)
plot(IMEC, nodesize = 8)
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC, nodesize = 8)
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC, nodesize = 8)
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
plot(IMEC, nodesize = 8)
summary(IMEC)
library("IMEC")
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
library(IMEC)
## explanatory breadth ##
T1 <- c("H1")
t2 <- c("H2")
Phenomena <- c("E1", "E2")
Thresholds <- c(2,2)
explanations <- initializeNetwork(Phenomena, T1, T2)
explanations <- Explain("H1", "E1", explanations)
explanations <- Explain("H1", "E2", explanations)
explanations <- initializeNetwork(Phenomena, T1, T2)
library(IMEC)
## explanatory breadth ##
T1 <- c("H1")
T2 <- c("H2")
Phenomena <- c("E1", "E2")
Thresholds <- c(2,2)
explanations <- initializeNetwork(Phenomena, T1, T2)
explanations <- Explain("H1", "E1", explanations)
explanations <- Explain("H1", "E2", explanations)
explanations <- Explain("H2", "E2", explanations)
explanations <- Contradict("H1", "H2", explanations)
Coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1, T2)
summary(Coherence)
breadth <- plot(Coherence)
## Refutation ##
#one theory
T1 <- c("H1")
Phenomena <- c("E1", "E2", "E3")
Thresholds <- c(2,2,2)
explanations <- initializeNetwork(Phenomena, T1)
explanations <- Explain(c("H1"),"E1",explanations,weight = 1.0001)
explanations <- Explain(c("H1"),"E2",explanations)
explanations <- Explain(c("H1"),"E3", explanations, weight = -1)
Coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
summary(Coherence)
Refutation1 <- plot(Coherence, nodesize = 16)
#two theories
T1 <- c("H1")
T2 <- c("H2")
Phenomena <- c("E1", "E2", "E3")
Thresholds <- c(2,2,-2)
explanations <- initializeNetwork(Phenomena, T1, T2)
explanations <- Explain(c("H1"),"E1",explanations)
explanations <- Explain(c("H1"),"E2",explanations)
explanations <- Explain(c("H2"),"E1",explanations)
explanations <- Explain(c("H2"),"E2",explanations)
explanations <- Explain(c("H1"),"E3", explanations, weight = -1)
explanations <- Contradict("H1", "H2", explanations)
Coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1, T2)
summary(Coherence)
Refutation2 <- plot(Coherence, nodesize = 16)
m <- matrix(c(1,2), byrow = T, nrow =  1)
layout(m)
layout.show(length(m))
layout(m)
par(oma=c(2, 2, 2, 2), mar=c(0, 0, 0, 0))
plot(Refutation1, nodesize = 20)
text(x = 0.9,adj = c(1,0),labels = "A", cex = 2)
box()
plot(Refutation2, nodesize = 20)
text(x = 0.9,adj = c(1,0),labels = "B", cex = 2)
box()
T1 <- c("H1")
T2 <- c("H2")
Phenomena <- c("E1", "E2", "E3", "E4")
Thresholds <- c(2,2,2,2)
explanations <- initializeNetwork(Phenomena, T1)
explanations <- Explain("H1", "E1", explanations)
explanations <- Explain("H2", "E2", explanations)
explanations <- Explain("H2", "E3", explanations)
explanations <- Explain("H2", "E4", explanations)
explanations <- Contradict("H1", "H2", explanations)
coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
plot(coherence, nodesize = 8)
T2 <- c("H2")
Phenomena <- c("E1", "E2", "E3", "E4")
Thresholds <- c(2,2,2,2)
explanations <- initializeNetwork(Phenomena, T1, T2)
explanations <- Explain("H1", "E1", explanations)
explanations <- Explain("H2", "E2", explanations)
explanations <- Explain("H2", "E3", explanations)
explanations <- Explain("H2", "E4", explanations)
explanations <- Contradict("H1", "H2", explanations)
coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1, T2)
plot(coherence, nodesize = 8)
T1 <- c("H1")
T2 <- c("H2")
Phenomena <- c("E1", "E2", "E3", "E4")
Thresholds <- c(2,2,2,2)
explanations <- initializeNetwork(Phenomena, T1, T2)
explanations <- Explain("H1", "E1", explanations)
explanations <- Explain("H2", "E2", explanations)
explanations <- Explain("H2", "E3", explanations)
explanations <- Explain("H2", "E4", explanations)
explanations <- Contradict("H1", "H2", explanations)
coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1, T2)
plot(coherence, nodesize = 8)
##We recommend to read the tutorial at https://osf.io/6dgyv/ before running this code.
library(IMEC)
#positive manifold by mutualism
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Mutualism <- c("HM1", "HM2", "HM3", "HM4")
Latent <- c("HL1", "HL2")
evidence <- c(rep(2,7), -2)
explanations <- initializeNetwork(Phenomena, Mutualism, Latent)
##Mutualism explanations
explanations <- Explain("HM1", "E1", explanations)
explanations <- Explain(c("HM1", "HM2"), "E2", explanations)
explanations <- Explain("HM1", "E3", explanations)
explanations <- Explain("HM1", "E4", explanations)
explanations <- Explain(c("HM1", "HM3"), "E5", explanations)
explanations <- Explain(c("HM1", "HM4"), "E6", explanations)
explanations <- Explain("HM1", "E7", explanations)
#Latent Variable Explanations
explanations <- Explain("HL1", "E1", explanations)
explanations <- Explain("HL1", "E3", explanations)
explanations <- Explain("HL1", "E4", explanations)
explanations <- Explain("HL1", "E5", explanations)
explanations <- Explain(c("HL1", "HL2"), "E6", explanations)
explanations <- Explain(c("HL1"), "E8", explanations, weight = -1)
explanations <- Contradict("HL1", "HM1", explanations)
coherence <- computeIMEC(explanations, evidence, Phenomena, Mutualism, Latent)
plot(coherence, nodesize = 6)
library(qgraph)
m <- matrix(c(1,0,1,0),nrow = 2)
qgraph(2)
m
#simple illustration figure
m <- matrix(c(1,0,1,0), nrow = 2, byrow = T)
qgraph(m)
#simple illustration figure
m <- matrix(c(0,0,1,0), nrow = 2, byrow = T)
qgraph(m)
#simple illustration figure
m <- matrix(c(0,1,1,0), nrow = 2, byrow = T)
qgraph(m)
?qgraph
m
IsingSampler::IsingLikelihood(m, c(1,0))
IsingSampler::IsingLikelihood(m, c(1,0), beta = 1)
0.9*0.6*0.8*0.6*0.6
0.9*0.8*0.6*0.6
devtools::install_github("MaxMaier42/IMEC")
# simple example comparing two hypotheses one of them with more explanatory breadth##
T1 <- c("H1", "H2")
Phenomena <- c("E1", "E2")
Thresholds <- c(2,2)
explanations <- initializeNetwork(Phenomena, T1)
explanations <- explain("H1", "E1", explanations)
# simple example comparing two hypotheses one of them with more explanatory breadth##
library(IMEC)
T1 <- c("H1", "H2")
Phenomena <- c("E1", "E2")
Thresholds <- c(2,2)
explanations <- initializeNetwork(Phenomena, T1)
explanations <- explain("H1", "E1", explanations)
explanations <- explain("H1", "E2", explanations)
explanations <- explain("H2", "E2", explanations)
explanations <- contradict("H1", "H2", explanations)
coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
summary(coherence)
coherence$phenomena
coherence$Evidence
evidence[1]
coherence$Evidence[1]
#'Thresholds <- c(2,2)
#'explanations <- initializeNetwork(Phenomena, T1)
#'explanations <- explain("H1", "E1", explanations)
#'explanations <- explain("H1", "E2", explanations)
#'explanations <- explain("H2", "E2", explanations)
#'explanations <- contradict("H1", "H2", explanations)
#'coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
#'summary(coherence)
#'plot(coherence)
#'@export
plot.IMEC <- function(x, nodesize = 10,...) {
IMEC <- x
matrix <- IMEC$Explanations
phenomena <- IMEC$phenomena
evidence <- IMEC$Evidence
theory1 <- IMEC$ExplanatoryCoherenceT1[[1]]
if (length(IMEC) > 4) {
theory2 <- IMEC$ExplanatoryCoherenceT2[[1]]
} else {
theory2 <- character()
}
propositions  <- c(theory1, theory2)
g  <- igraph::graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
colorsphenomena <- rep("blue", length(phenomena)))
for (i in 1:length(phenomena))
{
if(evidence[i] < 0){
colorsphenomena[i] <- c("red")
}
}
colors <- c(rep("yellow", length(theory1)), rep("green", length(theory2)), rep("orangered", length(phenomena)))
shapes <- c(rep("circle", length(theory1)), rep("circle", length(theory2)), rep("square", length(phenomena)))
yp <- c(rep(1, length(theory1)), rep(10, length(theory2)), rep(5, length(phenomena)))
if (length(theory2) > 0) {
xp <- c(1:length(theory1),1:length(theory2),1:length(phenomena))*20
} else {
xp <- c(1:length(theory1),1:length(phenomena))*200
}
positions <- as.matrix(cbind(xp, yp))
tk <- igraph::tkplot(g, vertex.color = colors, canvas.width = 1000)
igraph::tk_set_coords(tk, positions)
igraph::tk_center(tk)
igraph::tk_fit(tk)
readline(prompt="Press [enter] to continue")
qgraph::qgraph(matrix, layout = co, color = colors, shape = shapes, vsize = nodesize, theme = "colorblind")
}
#'Thresholds <- c(2,2)
#'explanations <- initializeNetwork(Phenomena, T1)
#'explanations <- explain("H1", "E1", explanations)
#'explanations <- explain("H1", "E2", explanations)
#'explanations <- explain("H2", "E2", explanations)
#'explanations <- contradict("H1", "H2", explanations)
#'coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
#'summary(coherence)
#'plot(coherence)
#'@export
plot.IMEC <- function(x, nodesize = 10,...) {
IMEC <- x
matrix <- IMEC$Explanations
phenomena <- IMEC$phenomena
evidence <- IMEC$Evidence
theory1 <- IMEC$ExplanatoryCoherenceT1[[1]]
if (length(IMEC) > 4) {
theory2 <- IMEC$ExplanatoryCoherenceT2[[1]]
} else {
theory2 <- character()
}
propositions  <- c(theory1, theory2)
g  <- igraph::graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
colorsphenomena <- rep("blue", length(phenomena)))
for (i in 1:length(phenomena)) {
if(evidence[i] < 0) {
colorsphenomena[i] <- c("red")
}
}
colors <- c(rep("yellow", length(theory1)), rep("green", length(theory2)), rep("orangered", length(phenomena)))
shapes <- c(rep("circle", length(theory1)), rep("circle", length(theory2)), rep("square", length(phenomena)))
yp <- c(rep(1, length(theory1)), rep(10, length(theory2)), rep(5, length(phenomena)))
if (length(theory2) > 0) {
xp <- c(1:length(theory1),1:length(theory2),1:length(phenomena))*20
} else {
xp <- c(1:length(theory1),1:length(phenomena))*200
}
positions <- as.matrix(cbind(xp, yp))
tk <- igraph::tkplot(g, vertex.color = colors, canvas.width = 1000)
igraph::tk_set_coords(tk, positions)
igraph::tk_center(tk)
igraph::tk_fit(tk)
readline(prompt="Press [enter] to continue")
qgraph::qgraph(matrix, layout = co, color = colors, shape = shapes, vsize = nodesize, theme = "colorblind")
}
devtools::build()
devtools::install_github("MaxMaier42/IMEC")
library(IMEC)
remove.packages("IMEC", lib="~/R/win-library/4.0")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMa1er/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github(MaxMaier42/IMEC)
devtools::install_github("MaxMaier42/IMEC")
devtools::install_github("MaxMaier42/IMEC")
# simple example comparing two hypotheses one of them with more explanatory breadth##
library(IMEC)
T1 <- c("H1", "H2")
Phenomena <- c("E1", "E2")
Thresholds <- c(-2,2)
explanations <- initializeNetwork(Phenomena, T1)
explanations <- explain("H1", "E1", explanations)
explanations <- explain("H1", "E2", explanations)
explanations <- explain("H2", "E2", explanations)
explanations <- contradict("H1", "H2", explanations)
coherence <- computeIMEC(explanations, Thresholds, Phenomena, T1)
summary(coherence)
plot(coherence)
devtools::spell_check()
setwd("C:/Users/Maximilian Maier/Desktop/IMECPackage/IMEC")
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::build()
devtools::spell_check()
devtools::build()
devtools::check()
devtools::spell_check()
devtools::check()
devtools::build()
devtools::check()
devtools::submit_cran()
devtools::submit_cran()
