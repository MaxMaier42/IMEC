library(IMEC)
?computeIMEC
#Comparison of Oxygen and Phlogiston Theory of Combustion
Phenomena <- c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8")
Oxygen <- c("OH1", "OH2", "OH3", "OH4", "OH5", "OH6")
Phlogiston <- c("PH1", "PH2", "PH3", "PH4", "PH5", "PH6")
evidence <- c(rep(1,8))
## oxygen and phlogiston
explanations <- initializeNetwork(Phenomena, Oxygen, Phlogiston)
#oygen explanations
explanations <- Explain(c("OH1", "OH2", "OH3"), "E1", explanations)
explanations <- Explain(c("OH1", "OH3"), "E3", explanations)
explanations <- Explain(c("OH1", "OH3", "OH4"), "E4", explanations)
explanations <- Explain(c("OH1", "OH5"), "E5", explanations)
explanations <- Explain(c("OH1", "OH4", "OH5"), "E6", explanations)
explanations <- Explain(c("OH1", "OH5"), "E7", explanations)
explanations <- Explain(c("OH1", "OH6"), "E8", explanations)
#phlogiston explanations
explanations <- Explain(c("PH1", "PH2", "PH3"), "E1", explanations)
explanations <- Explain(c("PH1", "PH3", "PH4"), "E2", explanations)
explanations <- Explain(c("PH5", "PH6"), "E5", explanations)
#Contradictions
explanations <- Contradict("PH3", "OH3", explanations)
explanations <- Contradict("PH6", "OH5", explanations)
IMEC <- computeIMEC(explanations,evidence, Phenomena, Oxygen, Phlogiston)
summary(IMEC)
plot(IMEC)
plot(IMEC, nodesize = 5)
#Elemental Theory
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2")
initializeNetwork(Phenomena, Propositions)
EL <- initializeNetwork(Phenomena, Propositions)
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c(T1, T2), P1)
library(IMEC)
#Elemental Theory
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2")
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c(T1, T2), P1)
Phenomena <- c("P1", "P2")
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c(T1, T2), P1, EL)
#Elemental Theory
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2")
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c(T1, T2), P1, EL)
?EExplain
?Explain
#Elemental Theory
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2")
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c("T1", "T2"), "P1", EL)
EL <- Explain(c("T3"), "P2", EL)
summary(EL)
summary(EL)
library(IMEC)
#Elemental Theory
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2")
EL <- initializeNetwork(Phenomena, Propositions)
EL <- Explain(c("T1", "T2"), "P1", EL)
EL <- Explain(c("T3"), "P2", EL)
summary(EL)
EL <- computeIMEC(EL, c(1,1), Phenomena, Propositions)
summary(EL)
#first modfication
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
ED <- Explain(c("T1", "T2"), "P1", EL)
ED <- Explain(c("T3"), "P2", EL)
ED <- Expain(c("T1", "T2", "T3"), "P2", EL)
ED <- computeIMEC(ED, c(1,1), Phenomena, Propositions)
#first modfication
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
#first modfication
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
ED <- Explain(c("T1", "T2"), "P1", ED)
ED <- Explain(c("T3"), "P2", ED)
ED <- Expain(c("T1", "T2", "T3"), "P2", ED)
ED <- computeIMEC(ED, c(1,1,1), Phenomena, Propositions)
#first modfication
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
ED <- Explain(c("T1", "T2"), "P1", ED)
ED <- Explain(c("T3"), "P2", ED)
ED <- Explain(c("T1", "T2", "T3"), "P2", ED)
ED <- computeIMEC(ED, c(1,1,1), Phenomena, Propositions)
summary(ED)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC)
EDC <- computeIMEC(EDC, c(1,1,1), Phenomena, Propositions)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
summary(ED)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#first modfication - errorlesss discrimination
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
ED <- Explain(c("T1", "T2"), "P1", ED)
ED <- Explain(c("T3"), "P2", ED)
ED <- Explain(c("T1", "T2", "T3"), "P3", ED)
ED <- computeIMEC(ED, c(1,1,1), Phenomena, Propositions)
summary(ED)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#first modfication - errorlesss discrimination
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3")
ED <- initializeNetwork(Phenomena, Propositions)
ED <- Explain(c("T1", "T2"), "P1", ED)
ED <- Explain(c("T3"), "P2", ED)
ED <- Explain(c("T1", "T2", "T3"), "P3", ED)
ED <- computeIMEC(ED, c(1,1,1), Phenomena, Propositions)
summary(ED)
mean(summary(Ed))
mean(summary(ED))
mean(summary(ED)[,2])
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 1)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
mean(summary(EDC)[,2])
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
EDC <- computeIMEC(EDC, c(1,1,1,5), Phenomena, Propositions)
EDC <- computeIMEC(EDC, c(1,1,1,5), Phenomena, Propositions)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,5), Phenomena, Propositions)
summary(EDC)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 4)
EDC <- computeIMEC(EDC, c(1,1,1,5), Phenomena, Propositions)
summary(EDC)
#Nonlinear Discrimination - Contradicted Theory not accounting for it
Propositions <- c("T1", "T2", "T3")
Phenomena <- c("P1", "P2", "P3", "P4")
EDC <- initializeNetwork(Phenomena, Propositions)
EDC <- Explain(c("T1", "T2"), "P1", EDC)
EDC <- Explain(c("T3"), "P2", EDC)
EDC <- Explain(c("T1", "T2", "T3"), "P3", EDC)
EDC <- Contradict(c("T1", "T2", "T3"), "P4", EDC, weight = 1)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#Accounting for Nonlinear Discrimination
Propositions <- c("T1", "T2", "T3", "T4")
Phenomena <- c("P1", "P2", "P3", "P4")
NL <- initializeNetwork(Phenomena, Propositions)
NL <- Explain(c("T1", "T2"), "P1", NL)
NL <- Explain(c("T3"), "P2", NL)
NL <- Explain(c("T1", "T2", "T3"), "P3", NL)
NL <- Explain(c("T4"), "P4", NL)
EDC <- computeIMEC(EDC, c(1,1,1,1), Phenomena, Propositions)
summary(EDC)
#Accounting for Nonlinear Discrimination
Propositions <- c("T1", "T2", "T3", "T4")
Phenomena <- c("P1", "P2", "P3", "P4")
NL <- initializeNetwork(Phenomena, Propositions)
NL <- Explain(c("T1", "T2"), "P1", NL)
NL <- Explain(c("T3"), "P2", NL)
NL <- Explain(c("T1", "T2", "T3"), "P3", NL)
NL <- Explain(c("T4"), "P4", NL)
NL <- computeIMEC(NL, c(1,1,1,1), Phenomena, Propositions)
summary(NL)
mean(summary(NL)[,2])
#Context dependence - Nonlinear Discrimination Theory after being contradicted
Propositions <- c("T1", "T2", "T3", "T4")
Phenomena <- c("P1", "P2", "P3", "P4", "P5")
#Context dependence - Nonlinear Discrimination Theory after being contradicted
Propositions <- c("T1", "T2", "T3", "T4")
Phenomena <- c("P1", "P2", "P3", "P4", "P5")
NLC <- initializeNetwork(Phenomena, Propositions)
NLC <- Explain(c("T1", "T2"), "P1", NLC)
NLC <- Explain(c("T3"), "P2", NLC)
NLC <- Explain(c("T1", "T2", "T3"), "P3", NLC)
NLC <- Explain(c("T4"), "P4", NLC)
NLC <- Contradict(c("T1", "T2", "T3", "T4"), "P5", NLC, weight = 1)
NLC <- computeIMEC(NLC, c(1,1,1,1,1), Phenomena, Propositions)
summary(NLC)
mean(summary(NLC)[,2])
#Theory after accounting for context dependence
Propositions <- c("T1", "T2", "T3", "T4", "T5")
Phenomena <- c("P1", "P2", "P3", "P4", "P5")
CD <- initializeNetwork(Phenomena, Propositions)
CD <- Explain(c("T1", "T2"), "P1", CD)
CD <- Explain(c("T3"), "P2", CD)
CD <- Explain(c("T1", "T2", "T3"), "P3", CD)
CD <- Explain(c("T4"), "P4", CD)
CD <- Explain(c("T5"), "P5", CD)
CD <- computeIMEC(CD, c(1,1,1,1,1), Phenomena, Propositions)
summary(CD)
mean(summary(CD)[,2])
par(mfrow=c(2,3))
plot(EL)
par(mfrow=c(2,3))
plot(EL)
plot(EDC)
plot(NLC)
par(mfrow=c(2,3))
par(mfrow=c(2,3))
plot(EL)
plot(ED)
plot(EDC)
plot(NL)
plot(NLC)
plot(CD)
par(mfrow=c(2,3), main = "Plot")
par(mfrow=c(2,3))
plot(EL)
plot(EDC)
plot(NLC)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -21, outer = TRUE)
par(mfrow=c(2,3))
plot(EL)
plot(EDC)
plot(NLC)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -40, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = 0, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = 0, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -10, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -5, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, font = "Times New Roman")
?mtext
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, fontsize = 14)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, size = 14)
?mtext
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, family = "serif")
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, family = "serif", bold = T)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, family = "serif", font = 2, cin = 14)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, family = "serif", font = 2, cex = 1.5)
par(mfrow=c(2,3))
par(mfrow=c(2,3))
plot(EL)
plot(ED)
plot(EDC)
plot(NL)
plot(NLC)
plot(CD)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -3, outer = TRUE, family = "serif", font = 2, cex = 1.5)
mtext("Explanatory Network for Different Theories about Learning", side = 3, line = -2, outer = TRUE, family = "serif", font = 2, cex = 1.5)
?text
text("A", X= 10, y =10 family = "serif", font = 2, cex = 1.5)
text( X= 10, y =10, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = 10, y =10, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = 50, y =50, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = 0, y =0, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = 0, y =0, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -10, y =-10, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -1, y =-1, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.1, y =-0.2, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.5, y =0.5, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.8, y =0.8, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.8, y =0.87, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.7, y =0.87, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -1, y =0.87, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.75, y =0.87, labels = "A", family = "serif", font = 2, cex = 1.5)
text( x = -0.7, y =0.8, labels = "A", family = "serif", font = 2, cex = 1.5)
install.packages("multipanelplot")
